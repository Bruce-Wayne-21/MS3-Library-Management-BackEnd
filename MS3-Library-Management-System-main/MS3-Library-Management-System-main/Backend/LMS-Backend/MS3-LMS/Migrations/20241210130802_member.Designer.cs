// <auto-generated />
using System;
using MS3_LMS.LMSDbcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MS3_LMS.Migrations
{
    [DbContext(typeof(LMSContext))]
    [Migration("20241210130802_member")]
    partial class member
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MS3_LMS.Enity.Book.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Book", b =>
                {
                    b.Property<Guid>("Bookid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Bookid");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookGenre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = new Guid("f9f0e3ab-23fd-4609-9b66-932e5f8751bc"),
                            BookGenre = "Fiction",
                            Description = "Fictional stories"
                        },
                        new
                        {
                            GenreId = new Guid("46d83547-b775-47f4-9250-6a86cbc01e03"),
                            BookGenre = "Non Fiction",
                            Description = "Non-fictional content"
                        },
                        new
                        {
                            GenreId = new Guid("20e02271-3ebf-4767-a4fd-cc672798842d"),
                            BookGenre = "Science Fiction",
                            Description = "Sci-fi stories"
                        },
                        new
                        {
                            GenreId = new Guid("6ad84ed6-2a50-4ecf-b2a0-62a759ab3a29"),
                            BookGenre = "Mystery",
                            Description = "Mystery novels"
                        },
                        new
                        {
                            GenreId = new Guid("bbf2ebaf-e773-4f4b-8a4a-f01988149022"),
                            BookGenre = "Thriller",
                            Description = "Thrilling stories"
                        },
                        new
                        {
                            GenreId = new Guid("c8c16002-594c-4b7c-b3d2-142869ba9c0f"),
                            BookGenre = "Romance Novel",
                            Description = "Romantic tales"
                        },
                        new
                        {
                            GenreId = new Guid("52a8ea4b-e8cc-4d27-bf9f-180acb6e1016"),
                            BookGenre = "Biography",
                            Description = "Life stories of individuals"
                        },
                        new
                        {
                            GenreId = new Guid("509871a3-7c2d-4153-81c9-b44e27e367b3"),
                            BookGenre = "Humor",
                            Description = "Funny and comedic stories"
                        },
                        new
                        {
                            GenreId = new Guid("b299cccf-2100-4b14-be32-5e712dd9051c"),
                            BookGenre = "Fairy Tale",
                            Description = "Fairy tales and folklore"
                        },
                        new
                        {
                            GenreId = new Guid("4470e11b-a020-4988-807a-a2ec90bdd92f"),
                            BookGenre = "Graphic Novel",
                            Description = "Stories told through illustrations"
                        },
                        new
                        {
                            GenreId = new Guid("55c7cdb3-4526-4684-96a3-d1ed826b5b30"),
                            BookGenre = "True Crime",
                            Description = "Real-life crime stories"
                        },
                        new
                        {
                            GenreId = new Guid("2778d7fa-2e01-41b6-8f37-9779a0062214"),
                            BookGenre = "Magical Realism",
                            Description = "Stories blending magic and realism"
                        });
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Image", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Bookid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image1Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Bookid")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeOfLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("157713e7-ce4a-4ac2-9327-15a3d9167929"),
                            TypeOfLanguage = "English"
                        },
                        new
                        {
                            LanguageId = new Guid("30040352-043a-499d-ad4d-5b36fd9f98c1"),
                            TypeOfLanguage = "Tamil"
                        },
                        new
                        {
                            LanguageId = new Guid("d17f7e14-5ad6-44f0-8008-c3cfff907d9e"),
                            TypeOfLanguage = "Singala"
                        });
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Publisher", b =>
                {
                    b.Property<Guid>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Bookid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FeedBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemebID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StarCount")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("Bookid");

                    b.HasIndex("MemebID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Core.BookLend", b =>
                {
                    b.Property<Guid>("LendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Bookid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CollectDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LendDays")
                        .HasColumnType("int");

                    b.Property<Guid>("MemebID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LendId");

                    b.HasIndex("Bookid");

                    b.HasIndex("MemebID");

                    b.ToTable("BookLends");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Core.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("SubId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Core.Restriction", b =>
                {
                    b.Property<Guid>("ResId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsRestricted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemebID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResId");

                    b.HasIndex("MemebID")
                        .IsUnique();

                    b.ToTable("Restrictions");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Core.Subscription", b =>
                {
                    b.Property<Guid>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemebID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubType")
                        .HasColumnType("int");

                    b.HasKey("SubId");

                    b.HasIndex("MemebID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Notification.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ViewStatus")
                        .HasColumnType("bit");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Notification.OTP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OTPCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("MS3_LMS.Enity.User.Member", b =>
                {
                    b.Property<Guid>("MemebID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsVerify")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nic")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserGender")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemebID");

                    b.HasIndex("Nic")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MS3_LMS.Enity.User.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = new Guid("6286153f-b9cb-440b-8d60-793a5e7a84bc"),
                            UserAType = "Member"
                        },
                        new
                        {
                            RoleID = new Guid("66fbba3e-656e-4664-9ae0-a3e6f1167671"),
                            UserAType = "Admin"
                        });
                });

            modelBuilder.Entity("MS3_LMS.Enity.User.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsConfirmEmail")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MS3_LMS.Enity.User.UserRole", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Book", b =>
                {
                    b.HasOne("MS3_LMS.Enity.Book.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS3_LMS.Enity.Book.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS3_LMS.Enity.Book.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS3_LMS.Enity.Book.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Language");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Image", b =>
                {
                    b.HasOne("MS3_LMS.Enity.Book.Book", "Book")
                        .WithOne("Image")
                        .HasForeignKey("MS3_LMS.Enity.Book.Image", "Bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Rating", b =>
                {
                    b.HasOne("MS3_LMS.Enity.Book.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("Bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS3_LMS.Enity.User.Member", "Member")
                        .WithMany("Ratings")
                        .HasForeignKey("MemebID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Core.BookLend", b =>
                {
                    b.HasOne("MS3_LMS.Enity.Book.Book", "Book")
                        .WithMany()
                        .HasForeignKey("Bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS3_LMS.Enity.User.Member", "Member")
                        .WithMany("BookLends")
                        .HasForeignKey("MemebID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Core.Payment", b =>
                {
                    b.HasOne("MS3_LMS.Enity.Core.Subscription", "Subscription")
                        .WithMany("Payment")
                        .HasForeignKey("SubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Core.Restriction", b =>
                {
                    b.HasOne("MS3_LMS.Enity.User.Member", "Member")
                        .WithOne("Restriction")
                        .HasForeignKey("MS3_LMS.Enity.Core.Restriction", "MemebID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Core.Subscription", b =>
                {
                    b.HasOne("MS3_LMS.Enity.User.Member", "Member")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MemebID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Notification.OTP", b =>
                {
                    b.HasOne("MS3_LMS.Enity.User.User", "User")
                        .WithMany("OTPs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MS3_LMS.Enity.User.Member", b =>
                {
                    b.HasOne("MS3_LMS.Enity.User.User", "User")
                        .WithOne("Member")
                        .HasForeignKey("MS3_LMS.Enity.User.Member", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MS3_LMS.Enity.User.UserRole", b =>
                {
                    b.HasOne("MS3_LMS.Enity.User.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MS3_LMS.Enity.User.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Book", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Language", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Book.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MS3_LMS.Enity.Core.Subscription", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MS3_LMS.Enity.User.Member", b =>
                {
                    b.Navigation("BookLends");

                    b.Navigation("Ratings");

                    b.Navigation("Restriction");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("MS3_LMS.Enity.User.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MS3_LMS.Enity.User.User", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("OTPs");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
